name: Build and Test Project

on:
  push:
  pull_request:

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout project
        uses: actions/checkout@v4

      - name: Create secrets.cmake (non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          rm -f secrets.cmake
          echo 'set(WIFI_SSID "my-test-ssid")' >> secrets.cmake
          echo 'set(WIFI_PASSWORD "my-test-password")' >> secrets.cmake

      - name: Create secrets.cmake (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          if (Test-Path secrets.cmake) { Remove-Item secrets.cmake }
          Add-Content secrets.cmake 'set(WIFI_SSID "my-test-ssid")'
          Add-Content secrets.cmake 'set(WIFI_PASSWORD "my-test-password")'
        shell: pwsh

      - name: Checkout Pico SDK
        uses: actions/checkout@v4
        with:
          repository: raspberrypi/pico-sdk
          path: pico-sdk
          ref: master
          submodules: recursive

      - name: Set environment vars
        run: |
          echo "PICO_SDK_PATH=$GITHUB_WORKSPACE/pico-sdk" >> $GITHUB_ENV

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build gcc g++ \
            gcc-arm-none-eabi libnewlib-arm-none-eabi

      #Â macOS runners have Homebrew pre-installed with CMake and Ninja
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install picotool llvm
          brew install --cask gcc-arm-embedded
          echo "$(brew --prefix gcc-arm-embedded)/bin" >> $GITHUB_PATH
          echo "$(brew --prefix llvm)/bin" >> $GITHUB_PATH

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' --yes
          choco install ninja -y
          choco install gcc-arm-embedded --version=10.3.1 -y
        shell: powershell

      - name: Configure CMake
        run: |
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DPICO_SDK_PATH="$GITHUB_WORKSPACE/pico-sdk" --no-warn-unused-cli -B build -G Ninja

      - name: Build Pico target
        run: ninja -v -C build picow_day_clock

      - name: Build native target and run tests
        if: matrix.os != 'windows-latest'
        run: |
          ninja -C build test_picow_day_clock
          cmake --build build --target run_tests
          cmake --build build --target coverage